{"version":3,"sources":["preloader.svg","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","TodoList.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","components/ReduxTodoListView.js","components/reduxTodoList.js","components/ReduxAppView.jsx","components/ReduxApp.jsx","index.js"],"names":["module","exports","__webpack_require__","p","TodoListTask","onDeleteTask","_this","props","deleteTask","task","id","onIsDoneChanged","e","changeStatus","currentTarget","checked","onTitleChanged","setState","newTitle","value","state","editMode","title","activateEditMode","deactivateEditMode","changeTitle","render","containerCssClass","status","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","API-KEY","todolistAPI","createTodolist","post","getTotolists","get","deleteTodoList","todolistId","delete","concat","getTasks","createTask","updateTask","put","deleteTasks","taskId","TodoList","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","isFetching","then","res","data","items","addTask","newTask","item","toConsumableArray","newFilterValue","changeTask","obj","_objectSpread","find","t","newTasks","src_TodoListTitle","src_AddNewItemForm","src","preloader","src_TodoListTasks","filter","src_TodoListFooter","newTasksTitileRef","createRef","Boolean","window","location","hostname","match","initialState","todolists","reducer","arguments","length","undefined","action","stateCopy","reducer_objectSpread","statyCopy","statCopy","newTodolist","stataCopy","newdelTodoLists","tl","newdelTasks","store","createStore","ReduxTodoListView","alt","deleteTodolist","ReduxTodoList","setTasks","reduxTodoList_objectSpread","components_ReduxTodoListView","assign","connect","todotasksFromServer","updateTaskOnServer","ReduxAppView","addTodoList","reduxTodoList","todoListId","ReduxApp","setTodolists","components_ReduxAppView","todolistsFromServer","ReactDOM","es","components_ReduxApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1b97b1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.aa3813e4.svg\";","import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n    onDeleteTask = ()=>{\n        debugger\n        this.props.deleteTask(this.props.task.id);\n    }\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked ? 2 : 0);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            newTitle: e.currentTarget.value\n        })\n    }\n\n    state = {\n        editMode: false,\n        newTitle: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.newTitle);\n    }\n\n\n    render = () => {\n\n        let containerCssClass = this.props.task.status === 2 ? \"todoList-task done\" : \"todoList-task\";\n\n        let priority = \"\";\n        switch (this.props.task.priority) {\n            case 0: priority = \"Low\"; break;\n            case 1: priority = \"Middle\"; break;\n            case 2: priority = \"High\"; break;\n            case 3: priority = \"Urgently\"; break;\n            case 4: priority = \"Later\"; break;\n        }\n\n\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status == 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true} value={this.state.newTitle} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: { priority }\n                    <button onClick={this.onDeleteTask} className='button'>Delete</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    \n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n                \n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n   render = () => {\n        return (\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '6fe6cb93-4f38-45a2-8141-96320128cd98'}\r\n});\r\n\r\n\r\nexport const todolistAPI = {\r\n    createTodolist(title) {\r\n        return instance.post(\"todo-lists\", {title});\r\n    },\r\n    getTotolists() {\r\n        return instance.get(\"todo-lists\");\r\n    },\r\n    deleteTodoList(todolistId){\r\n        return instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId, title) {\r\n        return instance.post(`todo-lists/${todolistId}/tasks`,\r\n            {title});\r\n    },\r\n    updateTask(task) {\r\n        return instance.put(`todo-lists/tasks`, task);\r\n    },\r\n    deleteTasks(taskId){\r\n        return instance.delete(`todo-lists/tasks/${taskId}`);\r\n    }\r\n}\r\n\r\nexport default instance;","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport instance, {todolistAPI} from \"./api\";\nimport preloader from \"./preloader.svg\";\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.setState({isFetching: true});\n        todolistAPI.getTasks(this.props.id)\n            .then(res => {\n                this.setState({isFetching: false});\n                this.setState( {tasks: res.data.items });\n            });\n    }\n\n    state = {\n        tasks: [],\n        filterValue: \"All\",\n        isFetching: false\n    };\n\n    addTask = (newText) => {\n        todolistAPI.createTask(this.props.id, newText)\n            .then(res => {\n                let newTask = res.data.data.item;//task, который создался на серваке и вернулся нам\n                this.setState({tasks: [...this.state.tasks, newTask]});\n            });\n\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    }\n\n    changeTask = (taskId, obj) => {\n        let task = this.state.tasks.find(t => t.id === taskId);\n        let newTask = {...task, ...obj};\n        todolistAPI.updateTask(newTask)\n            .then( res => {\n                let newTasks = this.state.tasks.map(t => {\n                    if (t.id != taskId) {\n                        return t;\n                    } else {\n                        return newTask;\n                    }\n                });\n                this.setState({\n                    tasks: newTasks\n                }, () => {\n                    this.saveState();\n                });\n            })\n    }\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    }\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n\n    render = () => {\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n                </div>\n\n                {this.state.isFetching\n                    ? <img src={preloader}/>\n                    : <TodoListTasks changeStatus={this.changeStatus}\n                                     changeTitle={this.changeTitle}\n                                     tasks={this.state.tasks.filter(t => {\n                                         if (this.state.filterValue === \"All\") {\n                                             return true;\n                                         }\n                                         if (this.state.filterValue === \"Active\") {\n                                             return t.status !== 2;\n                                         }\n                                         if (this.state.filterValue === \"Completed\") {\n                                             return t.status === 2;\n                                         }\n                                     })}/>\n                }\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {todolistAPI} from \"./api\";\nimport preloader from \"./preloader.svg\";\n\nclass App extends React.Component {\n\n    state = {\n        todolists: [],\n        isFetching: false\n    }\n\n    addTodoList = (title) => {\n        //instance.post(\"todo-lists\", {title: title})\n        todolistAPI.createTodolist(title)\n            .then(res => {\n                let todolist = res.data.data.item;//todolist, котоырй создался на серваке и вернулся нам\n                this.setState( {todolists: [...this.state.todolists, todolist ]});\n            });\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    }\n\n    restoreState = () => {\n        // объявляем наш стейт стартовый\n        this.setState({isFetching: true});\n\n        //instance.get(\"todo-lists\")\n        todolistAPI.getTotolists()\n            .then(res => {\n                this.setState({isFetching: false});\n                this.setState( {todolists: res.data });\n            });\n    }\n\n    render = () => {\n        const todolists = this.state\n            .todolists\n            .map(tl => <TodoList id={tl.id} title={tl.title}/>)\n\n        return (\n            <div className=\"App\">\n                <div>\n                   <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div >\n                    { this.state.isFetching ? <img src={preloader} /> : todolists}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ADD_TASK = 'ADD-TASK';\r\nexport const SET_TODOLISTS = 'SET-TODOLISTS';\r\nexport const SET_TODOLIST_TASKS = 'SET-TODOLIST-TASKS';\r\nexport const UPDATE_TASKS = 'UPDATE-TASKS';\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST';\r\nexport const DELETE_TODOLIST = 'DELETE-TODOLIST';\r\nexport const DELETE_TASK = 'DELETE-TASK';\r\n\r\nconst initialState = {\r\n    todolists: [],\r\n    tasks: []\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            let stateCopy = { ...state };\r\n            stateCopy.tasks = [...state.tasks,\r\n            { title: action.title }];\r\n            return stateCopy;\r\n\r\n\r\n        case SET_TODOLIST_TASKS:\r\n            let statyCopy = { ...state };\r\n            statyCopy.tasks = [...state.tasks,\r\n            ...action.tasks];\r\n            return statyCopy;\r\n\r\n        case UPDATE_TASKS:\r\n            let statCopy = { ...state };\r\n            statCopy.tasks = [\r\n                ...action.tasks];\r\n            return statCopy;\r\n        case ADD_TODOLIST:\r\n\r\n            let newTodoLists = [...state.todolists, action.newTodolist]\r\n            return { ...state, todolists: newTodoLists };\r\n        case SET_TODOLISTS:\r\n            let stataCopy = { ...state };\r\n            stataCopy.todolists = [...state.todolists, ...action.todolists];\r\n            return stataCopy;\r\n        // return {\r\n        //     ...state, \r\n        //     todolists: [...state.todolists, ...action.todolists]\r\n        // }\r\n        case DELETE_TODOLIST:\r\n            let newdelTodoLists = state.todolists.filter(tl => {\r\n                return tl.id !== action.todolistId\r\n            })\r\n            return { ...state, todolists: newdelTodoLists };\r\n        case DELETE_TASK:\r\n            debugger\r\n            let newdelTasks = state.tasks.filter(tl => {\r\n                return tl.id !== action.taskId\r\n            })\r\n            return { ...state, tasks: newdelTasks }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export const addTask =  (title) => {\r\n//     let action = {\r\n//         type: ADD_TASK,\r\n//         title: title\r\n//     };\r\n//     return action;\r\n// };\r\nexport const deleteTodoList = (todolistId) => ({ type: DELETE_TODOLIST, todolistId })\r\nexport const addTodoList = (newTodolist) => ({ type: ADD_TODOLIST, newTodolist })\r\nexport const addTask = (title) => ({ type: ADD_TASK, title });\r\nexport const deleteTask = (taskId) => ({ type: DELETE_TASK, taskId })\r\nexport const setTodolists = (todolistsFromServer) => {\r\n    let action = {\r\n        type: SET_TODOLISTS,\r\n        todolists: todolistsFromServer\r\n    };\r\n    return action;\r\n};\r\nexport const setTasks = (todotasksFromServer) => {\r\n    let action = {\r\n        type: SET_TODOLIST_TASKS,\r\n        tasks: todotasksFromServer\r\n    };\r\n    return action;\r\n\r\n};\r\nexport const changeTask = (updateTaskOnServer) => {\r\n    let action = {\r\n        type: UPDATE_TASKS,\r\n        tasks: updateTaskOnServer\r\n    };\r\n    return action;\r\n};\r\nexport default reducer;","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","import React from 'react';\nimport '../App.css';\nimport TodoListTasks from \"../TodoListTasks\";\nimport TodoListFooter from \"../TodoListFooter\";\nimport TodoListTitle from \"../TodoListTitle\";\nimport AddNewItemForm from \"../AddNewItemForm\";\nimport preloader from \"../preloader.svg\";\n\n\nconst ReduxTodoListView = (props)=>{\n    \n    const onDeleteTodolist = ()=>{\n        props.deleteTodolist(props.id)\n    }\n    return <div className=\"todoList\">\n    <div className=\"todoList-header\">\n        <TodoListTitle title={props.title}/>\n        <AddNewItemForm addItem={props.addTask}/>\n    </div>\n\n    {props.state.isFetching\n        ? <img src={preloader} alt=''/>\n        : <TodoListTasks deleteTask={props.deleteTask} changeStatus={props.changeStatus}\n                         changeTitle={props.changeTitle}\n                         tasks={props.tasks.filter(t => { \n                             \n                             if (props.state.filterValue === \"All\") {\n                                 return true;\n                             }\n                             if (props.state.filterValue === \"Active\") {\n                                 return t.status !== 2;\n                             }\n                             if (props.state.filterValue === \"Completed\") {\n                                 return t.status === 2;\n                             }\n                         })}/>\n    }\n    <TodoListFooter changeFilter={props.changeFilter} filterValue={props.state.filterValue}/>\n    <button onClick={onDeleteTodolist}>Delete</button>\n</div>\n}\n\nexport default ReduxTodoListView;\n    ","import React from 'react';\nimport '../App.css';\nimport  {todolistAPI} from \"../api\";\nimport { connect } from \"react-redux\";\nimport {setTasks,changeTask,deleteTodoList,deleteTask} from '../redux/reducer'\nimport ReduxTodoListView from './ReduxTodoListView';\n\nclass ReduxTodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.setState({isFetching: true});\n        todolistAPI.getTasks(this.props.id)\n            .then(res => {\n            \n                this.setState({isFetching: false});\n                this.props.setTasks(res.data.items);\n            });\n    }\n\n    state = {\n        filterValue: \"All\",\n        isFetching: false\n    };\n\n    addTask = (newText) => {\n        todolistAPI.createTask(this.props.id, newText)\n            .then(res => {\n                let newTask = res.data.data.item;\n                this.props.setTasks([newTask])//task, который создался на серваке и вернулся нам\n                // this.setState({tasks: [...this.state.tasks, newTask]});\n            });\n\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    }\n\n    changeTask = (taskId, obj) => {\n        let task = this.props.tasks.find(t => t.id === taskId);\n        let newTask = {...task, ...obj};\n        todolistAPI.updateTask(newTask)\n            .then( res => {\n                \n\n                let newTasks = this.props.tasks.map(t => {\n                    if (t.id !== taskId) {\n                        return t;\n                    } else {\n                        return newTask;\n                    }\n                });\n                this.props.changeTask(newTasks)\n                // this.setState({\n                //     tasks: newTasks\n                // }, () => {\n                //     this.saveState();\n                // });\n            })\n    }\n    deleteTask = (taskId)=>{\n        todolistAPI.deleteTasks(taskId)\n        .then( res =>{\n            debugger\n            this.props.deleteTask(taskId)\n        })\n    }\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    }\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n    deleteTodolist = (todolistId)=>{\n        todolistAPI.deleteTodoList(todolistId)\n        .then(res=>{\n            \n            this.props.deleteTodoList(todolistId)\n        })\n    }\n    render = () => {\n        \n        return (\n            <div className='todolistStyle'>\n                <ReduxTodoListView deleteTask={this.deleteTask} deleteTodolist={this.deleteTodolist} {...this.props} \n                addTask={this.addTask}\n                state={this.state} changeStatus={this.changeStatus} changeTitle={this.changeTitle}/>\n                \n            </div>\n            \n\n        );\n    }\n}\n\n// let mapDispatchToProps = (dispatch) => {\n//     return {\n//         setTasks: (todotasksFromServer) => {\n//             let action = {\n//                 type: SET_TODOLIST_TASKS,\n//                 tasks: todotasksFromServer\n//             };\n//             dispatch(action);\n\n//         },\n//         changeTask: (updateTaskOnServer) =>{\n//             let action = {\n//                 type: UPDATE_TASKS,\n//                 tasks: updateTaskOnServer\n//             };\n//             dispatch(action);\n//         }\n//     }\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n    //    tasks: state.tasks\n    }\n}\n\nexport default connect(mapStateToProps, {setTasks,changeTask,deleteTodoList,deleteTask})(ReduxTodoList);\n\n\n","import React from 'react';\r\nimport AddNewItemForm from '../AddNewItemForm';\r\nimport ReduxTodoList from './reduxTodoList'\r\n\r\n\r\n\r\nconst ReduxAppView = (props)=>{\r\n    return <div className=\"general\">\r\n    <AddNewItemForm addItem={props.addTodoList} />\r\n    {props\r\n        .todolists\r\n        .map(tl => <ReduxTodoList tasks={props.tasks.filter(t=>{\r\n            return t.todoListId === tl.id\r\n        })} id={tl.id} title={tl.title} />)}\r\n</div>\r\n}\r\n\r\nexport default ReduxAppView;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { todolistAPI } from \"./../api\";\r\nimport {addTask,setTodolists,addTodoList} from '../redux/reducer'\r\nimport ReduxAppView from './ReduxAppView';\r\n\r\nclass ReduxApp extends React.Component {\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n    restoreState = () => {\r\n        \r\n        // объявляем наш стейт стартовый\r\n        // this.setState({isFetching: true});\r\n\r\n        //instance.get(\"todo-lists\")\r\n        todolistAPI.getTotolists()\r\n        \r\n            .then(res => {\r\n                // this.setState({isFetching: false});\r\n                // this.setState( {todolists: res.data });\r\n                this.props.setTodolists(res.data);\r\n            });\r\n    }\r\n\r\n\r\n    addTodoList=(title)=>{\r\n        todolistAPI.createTodolist(title)\r\n        .then(res=>{\r\n            debugger\r\n            this.props.addTodoList(res.data.data.item)\r\n\r\n        })\r\n        \r\n    }\r\n    render() {\r\n       return <div>\r\n       <ReduxAppView {...this.props} addTodoList={this.addTodoList}/>\r\n       </div>\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addTask: (title) => {\r\n//             let action = {\r\n//                 type: ADD_TASK,\r\n//                 title: title\r\n//             };\r\n//             dispatch(action);\r\n//         },\r\n//         setTodolists: (todolistsFromServer) => {\r\n//             let action = {\r\n//                 type: SET_TODOLISTS,\r\n//                 todolists: todolistsFromServer\r\n//             };\r\n//             dispatch(action);\r\n\r\n//         }\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        todolists: state.todolists\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addTask,setTodolists, addTodoList})(ReduxApp);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store'\nimport ReduxApp from './components/ReduxApp';\nReactDOM.render(<Provider store={store}>\n    <ReduxApp />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}